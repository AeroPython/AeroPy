'''

Created on Fri Feb 20 20:57:16 2015

@author: Siro Moreno

This is a submodule for the genetic algorithm that is explained in
https://docs.google.com/presentation/d/1_78ilFL-nbuN5KB5FmNeo-EIZly1PjqxqIB-ant-GfM/edit?usp=sharing

This script is the main program. It will call the different submodules
and manage the data transfer between them in order to achieve the
genetic optimization of the profile.

'''




import os
import interfaz as interfaz
import numpy as np
import initial as initial
import genetics as genetics
import IPython.nbformat.current as nbf


######      Some commented code below is used to build and test this module


#
####---------Primary Variables-----
#
#
#airfoils_per_generation = 10
#total_generations = 10
#num_parent = 3
#
## We give the algorithm the conditions at wich we want to optimize our airofil
## through the "ambient data" tuple. 
#
#planet = 'Mars' # For the moment we have 'Earth' and 'Mars'
#chord_length = 0.2 # In metres
#altitude = -7.5 # In Kilometres above sea level or reference altitude
#speed_parameter = 'speed' # 'speed' or 'mach'
#speed_value = 30 # Value of the previous magnitude
#ambient_data = (planet, chord_length, altitude, speed_parameter, speed_value)
#
#
#
#####--------Secondary Variables------
##-- Analysis domain
#start_alpha_angle = 0
#finish_alpha_angle = 15
#alpha_angle_step = 1
#
#aero_domain = (start_alpha_angle, finish_alpha_angle, alpha_angle_step)
##-- Optimization objectives
#
#lift_coefficient_weight = 0.3
#efficiency_weight = 0.7
#
#weighting_parameters = (lift_coefficient_weight, efficiency_weight)
#
##-- Final results options
#
#num_winners = 3
#draw_winners = True
#draw_polars = True
#draw_evolution = True
#compare_naca_standard = True
#compare_naca_custom = True
#create_report = True
#
#end_options = (draw_winners, draw_polars, draw_evolution, 
#               compare_naca_standard, compare_naca_custom, 
#               create_report,
#               ambient_data, aero_domain)
#
#    
#   
#all_parameters = (airfoils_per_generation, total_generations, num_parent,
#                  num_winners, weighting_parameters, end_options )
#
#
#
#####                   FIN PARA PROBAR

def create_report(all_parameters): 
    
    generation = all_parameters[1]
    num_winners = all_parameters[3]
    weights = all_parameters[4]
    end_options = all_parameters[5]
    
    
    must_draw_winners = end_options[0]
    must_draw_polars = end_options[1]
    must_draw_evolution = end_options[2]
    must_compare_naca_standard = end_options[3]
    must_compare_naca_custom = end_options[4]
    must_create_report = end_options[5]
    ambient_data = end_options[6]
    aero_domain = end_options[7]
    compare = must_compare_naca_standard
    
    try:
        import urllib
        url = 'https://avatars3.githubusercontent.com/u/6246900?v=3&s=200'
        logo_root = os.path.join('graphics','logo.png')
        logo_complete_root = os.path.join('results', logo_root)
        urllib.request.urlretrieve(url, logo_complete_root)
        logo = True
    except:
        logo = False
        logo_root = ''
    


    report_root = os.path.join('results','results.ipynb')
    file_root = os.path.join('results','ejemplo.py')

    try:
        os.remove(report_root)
    except :
        pass

    try:
        os.remove(file_root)
    except :
        pass
    text_01_a = '''[<img src="'''
    text_01_b = logo_root
    text_01_c = '''" alt="AeroPython" style="width: 
            100px; float: center"/>](https://github.com/AeroPython) \n '''

    text_01_d = '''<p style='text-align: center;'>Aeropython Xfoil Genetic 
            Algorithm Report</p>'''

    if logo:
        text_01 = text_01_a + text_01_b + text_01_c + text_01_d
    else:
        text_01 = text_01_d

    cell_01 = nbf.new_text_cell('heading', source = text_01)

    text_02 = '''Thank you for using our Genetic algorithm! Now we will present a 
            short report displaying some data generated by the algorithm'''

    cell_02 = nbf.new_text_cell('markdown', source= text_02)
    
    text_03 = ('''The algorithm has searched for an optimal airfoil for flying in **'''
                + str(ambient_data[0]) + '''**, at an altitude of **'''  + 
                str(ambient_data[2]) + '''** Kilometers over the sea level or 
                reference level. The chord of the profile is **''' +
                str(ambient_data[1]) + ''' metres** long, and the **''' +
                str(ambient_data[3]) +'** has a value of **' +str(ambient_data[4]))
    if (str(ambient_data[3]) == 'speed'):
        text_03 = text_03 + ' meters per second'
    text_03 = text_03 + '**.'

    cell_03 = nbf.new_text_cell('markdown', source= text_03)
    
    text_04 =('''The airfoils were tested in XFoil between **''' + 
                str(aero_domain[0]) + '** and **' + str(aero_domain[1]) + 
                '** derees, increasing in increments of **' + str(aero_domain[2]) +
                '** degrees. The ' + str(num_winners) + ''' best airfoils of the
                last generation, or "winners", were aditionally tested between ''' + 
                str(aero_domain[0] - 1) + ' and ' + str(aero_domain[1] + 5) + 
                ' derees, in increments of ' + str(aero_domain[2] / 2) +
                ' degrees.''')
    
    cell_04 = nbf.new_text_cell('markdown', source= text_04)
    
    text_05 =('''In this execution of the algorithm, optimizing the Lift
                Coefficient had a weight of **''' + str(weights[0]) +
                '''**, while the efficiency , or Lift Coefficient
                divided by Drag Coefficient, had a weight of **''' +
                str(weights[1]) + ' **.\n\n' + 
                'The algorithm ran along **' + str(generation) + 
                ' generations**, each composed of **' + str(all_parameters[0]) + 
                ' airfoils**. For every generation, the best **' + str(all_parameters[2]) +
                '''** airfoils were selected and used as parents of the 
                next generation.''' )
    numbers =  [all_parameters[1],all_parameters[0],all_parameters[2]]
    
    text_05 = text_05 + '\n\n' + analyze_algorithm_numbers(numbers)
     
    text_05 = text_05 +('''\n\nIf you want more details about how this algorithm works, check
                the documentation that can be found at 
                https://docs.google.com/presentation/d/1_78ilFL-nbuN5KB5FmNeo-EIZly1PjqxqIB-ant-GfM/edit?usp=sharing''')
    
    
    cell_05 = nbf.new_text_cell('markdown', source= text_05)
    
    text_06 = ('''Now, let's see the results, starting with the values
                of Cl and efficiency achieved''')
    if compare:
        text_06 = text_06 + ''', along with the results for a typical airfoil
                            (NACA 5615) in order to compare their quality'''
    text_06 = text_06 + ':\n\n'                        
    cell_06 = nbf.new_text_cell('markdown', source= text_06)
                

    outputs = [nbf.new_output(output_type="stream", stream="stdout", output_text="a"),
                   nbf.new_output(output_type="text", output_text="b"),
                   nbf.new_output(output_type="stream", stream="stdout", output_text="c"),
                   nbf.new_output(output_type="stream", stream="stdout", output_text="d"),
                   nbf.new_output(output_type="stream", stream="stderr", output_text="e"),
                   nbf.new_output(output_type="stream", stream="stderr", output_text="f"),
                   nbf.new_output(output_type="png", output_png='Zw==')] # g
    out = nbf.new_output(output_type="application/pdf")
    out['application/pdf'] = 'aA==' # h
    outputs.append(out)
    cells=[cell_01,
           cell_02,
           cell_03,
           cell_04,
           cell_05,
           cell_06,
           nbf.new_code_cell(input="$ e $", prompt_number=1,outputs=outputs),
           nbf.new_text_cell('markdown', source="$ e $"),
            nbf.new_text_cell('markdown', source="Esto es una prueba"),
            nbf.new_text_cell('heading', source="Esto es una segunda prueba")]
    worksheets = [nbf.new_worksheet(cells=cells)]


    nb = nbf.new_notebook(name = 'hola', worksheets = worksheets )

    nbf.write(nb, open(report_root, 'x'), 'ipynb')



def analyze_algorithm_numbers(numbers):
    generation = numbers[0] 
    num_pop = numbers[1]
    num_parents = numbers[2]
    
    
    amount = []
    
    if generation < 3 :
        amount.append('very low')
    elif generation < 6 :
        amount.append('low')
    elif generation < 15 :
        amount.append('intermediate')
    elif generation < 30 :
        amount.append('high')
    else:
        amount.append('very high')
    
    
    if num_pop < 5 :
        amount.append('very low')
    elif num_pop < 10 :
        amount.append('low')
    elif num_pop < 30 :
        amount.append('intermediate')
    elif num_pop < 70 :
        amount.append('high')
    else:
        amount.append('very high')
    
    
    if num_parents < 2 :
        amount.append('very low')
    elif num_parents < 3 :
        amount.append('low')
    elif num_parents < 5 :
        amount.append('intermediate')
    elif num_parents < 7 :
        amount.append('high')
    else:
        amount.append('very high')
    
    text = ('According to these data, the number of **generations** is **' + 
            str(amount[0]) + '** , the number of **airfoils per generation** is **' +
            str(amount[1]) + '** and the number of **parents** is **'+ str(amount[2]) +
            '**.\n')
    dicc = {'very low' : 1,
            'low' : 2, 
            'intermediate' : 4,
            'high' : 8,
            'very high' : 16}
    
    parents_size = dicc[amount[2]]
    airfoils_size = dicc[amount[1]]
    generation_size = dicc[amount[0]]
    size = airfoils_size * generation_size
    
    if size < 4:
        text_2 = ('These specifications can just prove that the algorithm' + 
                    ''' works, but won't produce any interesting data.''')
    elif size < 16:
        text_2 = ('These specifications can serve to test the algorithm,' + 
                    '''and a little evolution can probably be seen, but won't''' +
                    'produce any really useful data.')
    elif size < 64:
        text_2 = ('These specifications can work fine for a first approach.' + 
                    ''' The algorithm should be producing a decent set of''' +
                    ' solutions, while in a moderate amount of time.')
    elif size < 252:
        text_2 = ('These specifications should provide a fairly good result.' + 
                    ''' If the Reynolds number is high, (a very large'''+
                    ''' airfoil flying very fast or very low), maybe you'''+
                    ''' couldn't go a lot further without spending an impractical''' + 
                    ' amount of time.' )
    else :        
        text_2 = ('''you are working with an amount of data that will'''+
        ' probably wring the capacity of this algorithm up to its limits.' +
        ' We hope that the amount of time that this calculations probably ' + 
        'have required will be rewarded with an excellent set of airfoils' +
        ' specificaly optimized to your conditions. If you wanted to go' +
        ' further in the design of airfoils, maybe you should search for a ' +
        'more specific software or a professional solution.')
    
    
    if (parents_size < airfoils_size):
        text_3 = (' For your next run, maybe you should **increase the number' + 
                    ' of  parents.** Too few parents may reduce the freedom' +
                    ' of the algorithm to try new ways to get better.')            
    elif (parents_size > airfoils_size):
        text_3 = (' For your next run, maybe you should **decrease the number' + 
                    ' of  parents.** Too much parents may left little room in'+
                    ' the airfoil number to properly generate new airfoils' +
                    ' in each generation.') 
    else:
        text_3 = (' For this amount of profiles, the **amount of parents is' +
                    ' equilibrated.**')
                    
    if (generation_size < airfoils_size):
        text_4 = (' For your next run, maybe you should **increase the number' + 
                    ' of  generations**. The fine adjustment of the airfoil' + 
                    ' happens in the later generations, and winners probably' +
                    ''' won't be well polished until at least generation number 15.''')            
    elif (generation_size > airfoils_size):
        text_4 = (' For your next run, maybe you should **increase the number' + 
                    ' of  airfoils** per generation. Too few airfoils may result '+
                    ' in a fine adjustment of a not so good local solution. '+ 
                    'For that amount of generations, a larger number of airfoils' +
                    ' would allow the algorithm to explore a wider range of ' +
                    'possible solutions, specially in the early generations.') 
    else:
        text_4 = (' For this amount of generations, the **amount of airfoils' +
                    ' per generation is equilibrated.**')                

    return text + text_2 + text_3 + text_4
    
#### Uncomment to continue testing
#
#create_report(all_parameters)